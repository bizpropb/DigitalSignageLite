import { useState, useEffect } from 'react'
import Pusher from 'pusher-js'

function RegisterAndStatus() {
  const [connectionStatus, setConnectionStatus] = useState('disconnected')
  const [messages, setMessages] = useState([])
  const [showRegisterButton, setShowRegisterButton] = useState(true)
  const [displayInfo, setDisplayInfo] = useState({
    id: null,
    device_id: null,
    name: 'N/A',
    type: null,
    location: 'N/A',
    auth_token: null
  })

  // Generate or retrieve persistent device ID
  const getDeviceId = () => {
    // First check localStorage for existing device ID
    let deviceId = localStorage.getItem('display_device_id')
    
    if (!deviceId) {
      // Generate new UUID-like device ID
      deviceId = 'display_' + 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0
        const v = c == 'x' ? r : (r & 0x3 | 0x8)
        return v.toString(16)
      })
      
      // Store permanently in localStorage
      localStorage.setItem('display_device_id', deviceId)
    }
    
    return deviceId
  }

  // Generate device name from browser info
  const generateDeviceName = () => {
    const platform = navigator.platform.replace(/\s+/g, '-')
    const resolution = `${screen.width}x${screen.height}`
    const browserName = navigator.userAgent.includes('Chrome') ? 'Chrome' : 
                       navigator.userAgent.includes('Firefox') ? 'Firefox' :
                       navigator.userAgent.includes('Safari') ? 'Safari' : 'Browser'
    
    return `${platform}-${resolution}-${browserName}`
  }

  // Function to register display with backend
  const registerDisplay = async () => {
    const deviceId = displayInfo.device_id || getDeviceId()
    const autoGeneratedName = generateDeviceName()
    
    try {
      const response = await fetch(`http://localhost:8000/api/displays/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          device_id: deviceId,
          name: autoGeneratedName,
          display_type: 'New',
          location: 'N/A',
        }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setDisplayInfo(prev => ({
            ...prev,
            id: data.display.id,
            device_id: deviceId,
            name: data.display.name,
            type: data.display.display_type,
            location: data.display.location,
            auth_token: data.display.auth_token
          }))
          // Store auth_token in localStorage for future use
          localStorage.setItem('display_auth_token', data.display.auth_token)
          setShowRegisterButton(false)
          // Reload page after successful registration
          setTimeout(() => {
            window.location.reload()
          }, 1000)
        }
      }
    } catch (error) {
      console.error('Failed to register display:', error)
    }
  }

  // Function to handle register button click
  const handleRegisterClick = () => {
    registerDisplay()
  }

  // Function to fetch existing display data
  const fetchDisplayData = async () => {
    const deviceId = getDeviceId()
    
    try {
      const response = await fetch(`http://localhost:8000/api/displays/check/${deviceId}`)
      
      if (response.ok) {
        const data = await response.json()
        if (data.display) {
          setDisplayInfo({
            id: data.display.id,
            device_id: deviceId,
            name: data.display.name || 'N/A',
            type: data.display.display_type || null,
            location: data.display.location || 'N/A',
            auth_token: data.display.auth_token
          })
          // Store auth_token in localStorage
          localStorage.setItem('display_auth_token', data.display.auth_token)
          setShowRegisterButton(false)
        }
      }
    } catch (error) {
      console.error('Failed to fetch display data:', error)
    }
  }

  // Function to send heartbeat
  const sendHeartbeat = async () => {
    if (!displayInfo.id) return
    
    try {
      await fetch(`http://localhost:8000/api/displays/heartbeat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          display_id: displayInfo.id,
        }),
      })
    } catch (error) {
      console.error('Failed to send heartbeat:', error)
    }
  }

  useEffect(() => {
    // Initialize Pusher connection to Laravel Reverb
    const pusher = new Pusher('local', {
      wsHost: window.location.hostname, // Use same host as React app
      wsPort: 8080,
      wssPort: 8080,
      forceTLS: false,
      enabledTransports: ['ws', 'wss'],
      disableStats: true,
      cluster: 'mt1', // Required by Pusher.js
      encrypted: false,
    })

    // Connection status handling
    pusher.connection.bind('connected', () => {
      setConnectionStatus('connected')
      // Fetch existing display data when connected
      fetchDisplayData()
    })

    pusher.connection.bind('disconnected', () => {
      setConnectionStatus('disconnected')
    })

    pusher.connection.bind('error', (error) => {
      setConnectionStatus('error')
      console.error('WebSocket connection error:', error)
    })

    // Subscribe to display channel for this client
    const channel = pusher.subscribe('display-updates')
    
    // Listen for test messages
    channel.bind('test-message', (data) => {
      // Get stored auth token from localStorage
      const storedAuthToken = localStorage.getItem('display_auth_token')
      
      // Verify auth token before displaying message
      if (data.auth_token && storedAuthToken && data.auth_token === storedAuthToken) {
        console.log('Authenticated Message Received')
        setMessages(prev => [...prev, {
          id: Date.now(),
          message: data.message,
          timestamp: new Date().toLocaleTimeString()
        }])
      } else if (data.auth_token) {
        console.log('Unauthorized message received: wrong key')
      } else {
        // For backward compatibility, show messages without auth_token
        console.log('Message received without authentication')
        setMessages(prev => [...prev, {
          id: Date.now(),
          message: data.message,
          timestamp: new Date().toLocaleTimeString()
        }])
      }
    })

    // Cleanup on unmount (but not in React StrictMode double-mount)
    return () => {
      if (channel) {
        pusher.unsubscribe('display-updates')
      }
      // Don't disconnect in development to avoid StrictMode issues
      if (import.meta.env.PROD) {
        pusher.disconnect()
      }
    }
  }, [])

  // Heartbeat effect - send heartbeat every 60 seconds when connected
  useEffect(() => {
    if (connectionStatus !== 'connected' || !displayInfo.id) return

    const heartbeatInterval = setInterval(sendHeartbeat, 60000) // 60 seconds
    
    return () => clearInterval(heartbeatInterval)
  }, [connectionStatus, displayInfo.id])

  const getStatusDisplay = () => {
    const statusConfig = {
      connected: {
        color: '#10b981',
        backgroundColor: '#ecfdf5',
        borderColor: '#a7f3d0',
        icon: '🟢',
        text: 'Connected'
      },
      disconnected: {
        color: '#ef4444', 
        backgroundColor: '#fef2f2',
        borderColor: '#fecaca',
        icon: '🔴',
        text: 'Disconnected'
      },
      error: {
        color: '#f59e0b',
        backgroundColor: '#fffbeb', 
        borderColor: '#fed7aa',
        icon: '🟡',
        text: 'Connection Error'
      }
    }
    
    return statusConfig[connectionStatus] || statusConfig.disconnected
  }

  const statusDisplay = getStatusDisplay()

  return (
    <div style={{ padding: '20px', fontFamily: 'system-ui, -apple-system, sans-serif' }}>
      {/* Header */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: '30px',
        borderBottom: '1px solid #e5e7eb',
        paddingBottom: '20px'
      }}>
        <div>
          <h1 style={{ margin: 0, color: 'black' }}>Presenter V3</h1>
          <p style={{ margin: '5px 0 0 0', color: '#6b7280', fontSize: '14px' }}>
            Digital Signage Display Client
          </p>
        </div>
        
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          {showRegisterButton && connectionStatus === 'connected' && (
            <button
              onClick={handleRegisterClick}
              style={{
                backgroundColor: '#dc2626',
                color: 'white',
                border: 'none',
                padding: '8px 16px',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'background-color 0.2s'
              }}
              onMouseOver={(e) => e.target.style.backgroundColor = '#b91c1c'}
              onMouseOut={(e) => e.target.style.backgroundColor = '#dc2626'}
            >
              Register This Display
            </button>
          )}
          
          <div style={{ 
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            padding: '8px 16px', 
            backgroundColor: statusDisplay.backgroundColor,
            color: statusDisplay.color,
            border: `1px solid ${statusDisplay.borderColor}`,
            borderRadius: '8px',
            fontSize: '14px',
            fontWeight: '500'
          }}>
            <span>{statusDisplay.icon}</span>
            <span>{statusDisplay.text}</span>
          </div>
        </div>
      </div>

      {/* Display Information */}
      <div style={{
        backgroundColor: '#f9fafb',
        border: '1px solid #e5e7eb',
        borderRadius: '8px',
        padding: '20px',
        marginBottom: '30px'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#374151' }}>Registration</h3>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px', marginBottom: '20px' }}>
          <div>
            <strong style={{ color: '#6b7280' }}>Name:</strong> {displayInfo.name}
          </div>
          <div>
            <strong style={{ color: '#6b7280' }}>Type:</strong> {displayInfo.type || 'Not set'}
          </div>
          <div>
            <strong style={{ color: '#6b7280' }}>Location:</strong> {displayInfo.location}
          </div>
          <div>
            <strong style={{ color: '#6b7280' }}>ID:</strong> {displayInfo.id || 'Not registered'}
          </div>
        </div>
        
        {displayInfo.id && (
          <div style={{
            marginTop: '15px',
            padding: '12px',
            backgroundColor: '#dcfce7',
            border: '1px solid #bbf7d0',
            borderRadius: '6px',
            color: '#166534',
            fontSize: '14px'
          }}>
            ✅ Display successfully registered
          </div>
        )}
      </div>

      {/* Messages */}
      <div style={{
        backgroundColor: '#ffffff',
        border: '1px solid #e5e7eb',
        borderRadius: '8px',
        padding: '20px'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#374151' }}>Test-Message-System</h3>
        {messages.length === 0 ? (
          <p style={{ color: '#6b7280', fontStyle: 'italic' }}>
            No messages received yet.
            <br />Send a test message from the admin panel.
            <br />Messages are temporary and not saved in the database.
          </p>
        ) : (
          <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
            {messages.map(msg => (
              <div key={msg.id} style={{ 
                padding: '10px',
                borderBottom: '1px solid #f3f4f6',
                fontSize: '14px'
              }}>
                <div style={{ color: '#6b7280', fontSize: '12px' }}>
                  {msg.timestamp}
                </div>
                <div style={{ color: '#374151', marginTop: '4px' }}>
                  {msg.message}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Device Identity Warning */}
      <div style={{
        marginTop: '20px',
        backgroundColor: '#fef3c7',
        border: '1px solid #fbbf24',
        borderRadius: '8px',
        padding: '16px'
      }}>
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <div style={{ 
            color: '#f59e0b', 
            marginRight: '12px',
            fontSize: '20px',
            lineHeight: '20px'
          }}>
            ⚠️
          </div>
          <div>
            <div style={{ margin: '0', color: '#78350f', fontSize: '13px', lineHeight: '1.4' }}>
              <strong>Device identity is browser-specific.</strong> 
              <div>
              Switching browsers, clearing browser storage, 
              or reinstalling the browser will create a new device identity and duplicate entries in the system. 
              Keep the same browser for consistent device tracking.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default RegisterAndStatus